{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abu Sufyan\\\\ReactJS\\\\src\\\\index.js\";\nimport React from 'react';\nimport Dispatcher from 'fluxocket';\nimport Store from './Store.js';\nimport openSocket from 'socket.io-client';\n\nvar http = require('http');\n\nvar socket = openSocket(http);\n\nvar io = require('socket.io-client')(http);\n\nvar express = require('express');\n\nvar app = express();\nDispatcher.register(function (payload) {\n  switch (payload.action) {\n    case 'add_msg':\n      Store.add(payload.data);\n      Store.emitChange();\n      break;\n  }\n});\nvar Chat = React.createClass({\n  displayName: \"Chat\",\n  getInitialState: function getInitialState() {\n    return {\n      messages: [],\n      userName: ''\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    Store.subscribe(this.change);\n    var socket = io();\n    Dispatcher.setSocket(socket);\n  },\n  componentDidMount: function componentDidMount() {\n    var username = '';\n\n    do {\n      username = prompt('Enter name:');\n    } while (!username.length);\n\n    this.setState({\n      userName: username\n    });\n  },\n  change: function change() {\n    this.setState({\n      messages: Store.get()\n    });\n  },\n  sendMessage: function sendMessage(e) {\n    e.preventDefault();\n    var from = this.state.userName;\n    var text = this.refs['msg'].getDOMNode().value;\n    var timestamp = Date.now();\n\n    if (!from.length || !text.length) {\n      alert('Name and message is required');\n      return;\n    }\n\n    Dispatcher.dispatch({\n      action: 'add_msg',\n      data: {\n        from: from,\n        text: text,\n        timestamp: timestamp\n      }\n    });\n    this.refs['form'].getDOMNode().reset();\n  },\n  render: function render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"messages\",\n      ref: \"messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.messages.map(function (msg, k) {\n      return React.createElement(\"li\", {\n        key: k,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"msgSender\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, msg.from, \":\"), \" \", msg.text);\n    })), React.createElement(\"form\", {\n      className: \"form\",\n      ref: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      autoComplete: \"off\",\n      className: \"msg\",\n      placeholder: \"message\",\n      ref: \"msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Send\")));\n  }\n});\nReact.render(React.createElement(Chat, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 80\n  },\n  __self: this\n}), document.getElementById('root1'));","map":{"version":3,"sources":["C:/Users/Abu Sufyan/ReactJS/src/index.js"],"names":["React","Dispatcher","Store","openSocket","http","require","socket","io","express","app","register","payload","action","add","data","emitChange","Chat","createClass","getInitialState","messages","userName","componentWillMount","subscribe","change","setSocket","componentDidMount","username","prompt","length","setState","get","sendMessage","e","preventDefault","from","state","text","refs","getDOMNode","value","timestamp","Date","now","alert","dispatch","reset","render","map","msg","k","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Dispatcher from 'fluxocket';\r\nimport Store from './Store.js';\r\nimport openSocket from 'socket.io-client';\r\nvar http = require('http');\r\nconst socket = openSocket(http);\r\nvar io = require('socket.io-client')(http);\r\nvar express = require('express');\r\nvar app = express();\r\nDispatcher.register(function(payload) {\r\n\tswitch(payload.action) {\r\n\t\tcase 'add_msg':\r\n\t\t\tStore.add(payload.data);\r\n\t\t\tStore.emitChange();\r\n\t\t\tbreak;\r\n\t}\r\n});\r\n\r\nlet Chat = React.createClass({\r\n\tgetInitialState() {\r\n\t\treturn {\r\n\t\t\tmessages: [],\r\n\t\t\tuserName: ''\r\n\t\t}\r\n\t},\r\n\tcomponentWillMount() {\r\n\t\tStore.subscribe(this.change);\r\n\t\tlet socket = io();\r\n\t\tDispatcher.setSocket(socket);\r\n\t},\r\n\tcomponentDidMount() {\r\n\t\tvar username = '';\r\n\r\n\t\tdo {\r\n\t\t\tusername = prompt('Enter name:');\r\n\t\t} while (!username.length);\r\n\r\n\t\tthis.setState({\r\n\t\t\tuserName: username\r\n\t\t});\r\n\t},\r\n\tchange() {\r\n\t\tthis.setState({\r\n\t\t\tmessages: Store.get()\r\n\t\t});\r\n\t},\r\n\tsendMessage(e) {\r\n\t\te.preventDefault();\r\n\t\tlet from = this.state.userName;\r\n\t\tlet text = this.refs['msg'].getDOMNode().value;\r\n\t\tlet timestamp = Date.now();\r\n\r\n\t\tif(!from.length || !text.length) {\r\n\t\t\talert('Name and message is required');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tDispatcher.dispatch({\r\n\t\t\taction: 'add_msg',\r\n\t\t\tdata: { from, text, timestamp }\r\n\t\t});\r\n\r\n\t\tthis.refs['form'].getDOMNode().reset();\r\n\t},\r\n\trender() {\r\n\t\treturn <div>\r\n\t\t\t<ul className=\"messages\" ref='messages'>\r\n\t\t\t\t{this.state.messages.map((msg, k) => {\r\n\t\t\t\t\treturn <li key={k}><span className='msgSender'>{msg.from}:</span> {msg.text}</li>\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t\t<form className='form' ref='form'>\r\n\t\t\t\t<input autoComplete=\"off\" className='msg' placeholder='message' ref='msg' />\r\n\t\t\t\t<button onClick={this.sendMessage}>Send</button>\r\n\t\t\t</form>\r\n\t\t</div>;\r\n\t}\r\n});\r\n\r\nReact.render(<Chat />, document.getElementById('root1'));"]},"metadata":{},"sourceType":"module"}