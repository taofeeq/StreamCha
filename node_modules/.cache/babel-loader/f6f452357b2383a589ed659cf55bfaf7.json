{"ast":null,"code":"/**\n * Special version of the Stream logger, which logs errors and warnings to stderr and all other\n * levels to stdout.\n *\n * @class Loggers.Console\n * @extends LoggerAbstract\n * @constructor\n * @param {Object} config - The configuration for the Logger\n * @param {string} config.level - The highest log level for this logger to output.\n * @param {Log} bridge - The object that triggers logging events, which we will record\n */\nmodule.exports = Console;\n\nvar LoggerAbstract = require('../logger');\n\nvar _ = require('lodash');\n\nvar utils = require('../utils');\n\nfunction Console(log, config) {\n  LoggerAbstract.call(this, log, config); // config/state\n\n  this.color = _.has(config, 'color') ? !!config.color : true;\n}\n\nutils.inherits(Console, LoggerAbstract);\n/**\n * Override the LoggerAbstract's setup listeners to do a little extra setup\n *\n * @param  {Array} levels - The levels that we should be listeneing for\n */\n\nConsole.prototype.setupListeners = function (levels) {\n  // call the super method\n  LoggerAbstract.prototype.setupListeners.call(this, levels);\n};\n\nConsole.prototype.write = function (label, message, to) {\n  if (console[to]) {\n    console[to](this.format(label, message));\n  }\n};\n/**\n * Handler for the bridges \"error\" event\n *\n * @method onError\n * @private\n * @param  {Error} e - The Error object to log\n * @return {undefined}\n */\n\n\nConsole.prototype.onError = utils.handler(function (e) {\n  var to = console.error ? 'error' : 'log';\n  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack || e.message, to);\n});\n/**\n * Handler for the bridges \"warning\" event\n *\n * @method onWarning\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nConsole.prototype.onWarning = utils.handler(function (msg) {\n  this.write('WARNING', msg, console.warn ? 'warn' : 'log');\n});\n/**\n * Handler for the bridges \"info\" event\n *\n * @method onInfo\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nConsole.prototype.onInfo = utils.handler(function (msg) {\n  this.write('INFO', msg, console.info ? 'info' : 'log');\n});\n/**\n * Handler for the bridges \"debug\" event\n *\n * @method onDebug\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nConsole.prototype.onDebug = utils.handler(function (msg) {\n  this.write('DEBUG', msg, console.debug ? 'debug' : 'log');\n});\n/**\n * Handler for the bridges \"trace\" event\n *\n * @method onTrace\n * @private\n * @return {undefined}\n */\n\nConsole.prototype.onTrace = utils.handler(function (msg) {\n  this.write('TRACE', this._formatTraceMessage(msg), 'log');\n});","map":null,"metadata":{},"sourceType":"script"}